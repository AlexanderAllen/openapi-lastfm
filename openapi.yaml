openapi: 3.0.3
info:
  title: Last.fm - OpenAPI 3.0
  description: |-
    The API allows developers to discover trending information about artists, albums, tags, and tracks. In addition Last.fm supports some geolocated information about artists and tracks, as well as Last.fm user profile information.

    In order to interact with the Last.fm you will need to [get an API account](https://www.last.fm/api/account/create).

    The API root URL is located at `http://ws.audioscrobbler.com/2.0/`

    ## Commercial or Research Usage

    _If you are planning to use Last.fm API for commercial or research/academic purposes, please contact Last.fm prior to use at [partners@last.fm](mailto:partners@last.fm)._

    Some useful links:
    - [The Last.fm API](https://www.last.fm/api)
    - [The source specification for the Last.fm API](https://github.com/AlexanderAllen/openapi-lastfm/openapi.yaml)
  termsOfService: https://www.last.fm/legal/terms
  contact:
    name: Richard Allen
    url: https://www.linkedin.com/in/drupalista/
  license:
    name: GNU General Public License v2.0 or later
    url: https://spdx.org/licenses/GPL-2.0-or-later.html
  version: 1.0.0
externalDocs:
  description: Discover more about the Last.fm API
  url: https://www.last.fm/api#getting-started
servers:
  - url: http://ws.audioscrobbler.com/2.0
tags:
  - name: artist
    description: Metadata about artists
paths:
  /artist.addTags:
    post:
      tags:
        - artist
      summary: Update an existing pet
      description: Tag an artist with one or more user supplied tags.
      operationId: addTags
      requestBody:
        description: This is a write service and must be accessed with an HTTP POST request. All parameters should be sent in the POST body, including the 'method' parameter. See [rest requests](https://www.last.fm/api/rest) for more information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - api_key:
            - write:pets
            - read:pets

  /artist.getinfo:
    get:
      tags:
        - artist
      summary: Get the metadata for an artist.
      description: Get the metadata for an artist. Includes biography, truncated at 300 characters.
      operationId: getInfo
      parameters:
        - name: artist
          in: query
          description: The artist name. Required unless mbid is given.
          required: true
          explode: true
          schema:
            type: string
            example: 'Cher'
        - name: mbid
          in: query
          description: The musicbrainz id for the artist
          schema:
            type: string
            example: 'bfcc6d75-a6a5-4bc6-8282-47aec8531818'
          allowEmptyValue: true
        - name: lang
          in: query
          description: The language to return the biography in, expressed as an ISO 639 alpha-2 code.
          schema:
            type: string
          allowEmptyValue: true
        - name: autocorrect
          in: query
          description: Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
          schema:
            type: string
          allowEmptyValue: true
        - name: username
          in: query
          description: The username for the context of the request. If supplied, the user's playcount for this artist is included in the response.
          schema:
            type: string
          allowEmptyValue: true

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artist'
            application/xml:
              schema:
                $ref: '#/components/schemas/artist'
        '405':
          description: Invalid input
      security:
        - api_key:
            - write:pets
            - read:pets

components:
  schemas:
    artist:
      type: object
      properties:
        name:
          type: string
          example: 'Cher'
        mbid:
          type: string
          example: 'bfcc6d75-a6a5-4bc6-8282-47aec8531818'
        url:
          type: string
          example: 'http://www.last.fm/music/Cher'
        image:
          type: array
          items:
            title: 'small'
            example: 'http://userserve-ak.last.fm/serve/50/285717.jpg'
        streamable:
          type: string
          example: '1'
        bio:
          type: object
          properties:
            published:
              type: string
              example: 'Thu, 13 Mar 2008 03:59:18 +0000'
            summary:
              type: string
            content:
              type: string

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet

  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      description: A Last.fm API key.
      in: query
